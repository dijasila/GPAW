#!/usr/bin/python

# Emacs: treat this as -*- python -*-

import os
import sys
import time
import glob
import trace
import tempfile

home = os.environ['HOME']

os.environ['DISPLAY'] = ':0.0'
import matplotlib
matplotlib.use('Agg')
import pylab

import docutils


def send_email(subject, filename='/dev/null'):
    #assert os.system('mail -s "%s" gridpaw-developer@lists.berlios.de < %s' %
    assert os.system('mail -s "%s" jensj@fysik.dtu.dk < %s' %
                     (subject, filename)) == 0

def send_jj_email(subject, filename='/dev/null'):
    assert os.system('mail -s "%s" jensj@fysik.dtu.dk < %s' %
                     (subject, filename)) == 0

def fail(msg, filename='/dev/null'):
    send_email(msg, filename)
    raise SystemExit


tests = ''
# For a quick test - uncomment this line:
#tests = 'gradient.py hydrogen.py'
#tests = 'PBE.py Gauss.py parallel-restart.py parmigrate.py wannier-hwire.py'
#tests = 'parmigrate.py'

tmpdir = tempfile.mkdtemp(prefix='gpaw-')
os.chdir(tmpdir)

# Checkout a fresh version and install:
if os.system('svn export ' +
             'https://svn.fysik.dtu.dk/projects/gpaw/trunk gpaw') != 0:
    fail('Checkout of gpaw failed!')
if os.system('svn export ' +
             'https://svn.fysik.dtu.dk/projects/ase/trunk ase') != 0:
    fail('Checkout of ASE failed!')
os.chdir('gpaw')
if os.system('python setup.py install --home=%s ' % tmpdir +
             '2>&1 | grep -v "c/libxc/src"') != 0:
    fail('Installation failed!')

os.system('mv ../ase/ase ../lib/python')

os.system('wget --no-check-certificate --quiet ' +
          'http://wiki.fysik.dtu.dk/stuff/gpaw-setups-latest.tar.gz')

os.system('tar xvzf gpaw-setups-latest.tar.gz')

setups = tmpdir + '/gpaw/' + glob.glob('gpaw-setups-*')[0]
export = ('export PYTHONPATH=%s/lib/python; ' % tmpdir +
          'export GPAW_SETUP_PATH=%s; ' % setups)
print export


# Run test-suite:
os.chdir('test')
##if os.system(export + 'python test.py -p %s >& test.out' % tests) != 0:
if os.system(export + 'python test.py %s >& test.out' % tests) != 0:
    fail('Testsuite failed!')
try:
    failed = open('failed-tests.txt').readlines()
except IOError:
    pass
else:
    # Send mail:
    n = len(failed)
    if n == 1:
        subject = 'One failed test: ' + failed[0][:-1]
    else:
        subject = '%d failed tests: %s, %s' % (n,
                                               failed[0][:-1], failed[1][:-1])
        if n > 2:
            subject += ', ...'
    fail(subject, 'test.out')

dir = '/scratch/jensj/nightly-test/'
out = open(dir + 'test-results.txt', 'w')
print >> out, """\
.. contents::

Test results from last night
============================

::

"""
for line in open('test.out'):
    print >> out, '  ', line,
print >> out

if 0:
    # PyLint:
    os.chdir('../../lib/python')
    os.system('rm -rf gpaw/gui')
    if os.system(export + 'pylint -f html gpaw; ' +
                 'cp pylint_global.html %s' % dir) != 0:
        fail('PyLint failed!')

# Generate tar-file:
os.chdir('../../gpaw')
if False:#ok:
    assert os.system('python setup.py sdist;' +
                     'cp dist/*.tar.gz ' + dir) == 0

if 0:
    # Count number of lines:
    f = open(dir + 'pylint_global.html')
    code = 0
    docstring = 0
    comment = 0
    while True:
        line = f.readline()
        if line == '<td>code</td>\n':
            code += int(f.readline()[4:].split('<')[0])
        elif line == '<td>docstring</td>\n':
            docstring += int(f.readline()[4:].split('<')[0])
        elif line == '<td>comment</td>\n':
            comment += int(f.readline()[4:].split('<')[0])
            break

def count(dir, pattern):
    p = os.popen('wc -l `find %s -name %s` | tail -1' % (dir, pattern), 'r')
    return int(p.read().split()[0])

libxc = count('c/libxc', '\\*.[ch]')
ch = count('c', '\\*.[ch]') - libxc
py = count('gpaw', '\\*.py')
test = count('test', '\\*.py')

# Update the stat.dat file:
f = open(dir + 'stat.dat', 'a')
print >> f, pylab.epoch2num(time.time()), libxc, ch, py, test
f.close()

# Construct the stat.png file:
lines = open(dir + 'stat.dat').readlines()
date, libxc, c, code, test = zip(*[[float(x) for x in line.split()]
                                   for line in lines[1:]])
date = pylab.array(date)
code = pylab.array(code)
test = pylab.array(test)
c = pylab.array(c)

def polygon(x, y1, y2, *args, **kwargs):
    x = pylab.concatenate((x, x[::-1]))
    y = pylab.concatenate((y1, y2[::-1]))
    pylab.fill(x, y, *args, **kwargs)

fig = pylab.figure()
ax = fig.add_subplot(111)
polygon(date, code + test, code + test + c,
        facecolor='r', label='C-code')
polygon(date, code, code + test,
        facecolor='y', label='Tests')
polygon(date, [0] * len(date), code,
        facecolor='g', label='Python-code')
polygon(date, [0] * len(date), [0] * len(date),
        facecolor='b', label='Fortran-code')

months = pylab.MonthLocator()
months3 = pylab.MonthLocator(interval=3)
month_year_fmt = pylab.DateFormatter("%b '%y")

ax.xaxis.set_major_locator(months3)
ax.xaxis.set_minor_locator(months)
ax.xaxis.set_major_formatter(month_year_fmt)
labels = ax.get_xticklabels()
pylab.setp(labels, rotation=30)
pylab.axis('tight')
pylab.legend(loc='upper left')
pylab.title('Number of lines')
pylab.savefig(dir + 'stat.png')

f = open(dir + 'stat.txt', 'w')
print >> f, """\

.. image:: stat.png


"""

# Coverage test:
os.chdir('test')
day = time.localtime()[6]
if day == 3:  # only Sunday
    if os.system(export +
                 'rm %s/*.cover; ' % dir +
                 'python %s/trace.py' % os.path.dirname(trace.__file__) +
                 ' --count --coverdir coverage --missing' +
                 ' --ignore-dir /usr:%s test.py %s' % (home, tests)) != 0:
        fail('Coverage failed!')
    
    filenames = glob.glob('coverage/gpaw.*.cover')
else:
    filenames = glob.glob(dir + '*.cover')
    
names = []
for filename in filenames:
    missing = 0
    for line in open(filename):
        if line.startswith('>>>>>>'):
            missing += 1
    if missing > 0:
        if filename.startswith('coverage/gpaw.'):
            name = filename[14:-6]
            if os.system('cp %s %s/%s.cover' %
                         (filename, dir, name)) != 0:
                fail('????')
        else:
            name = filename[28:-6]
        names.append((-missing, name))

print >> out, """\

Coverage
========

"""
if len(names) > 0:
    m = 3 + max([len(name) for n, name in names])
    sep = ' ' + m * '=' + '  ====='
    print >> out, 'Test-suite does not cover all of the code!'
    print >> out, 'Number of missing lines:'
    print >> out
    print >> out, sep
    print >> out, ' %-*s  Lines' % (m, 'Module')
    print >> out, sep
    names.sort()
    for n, name in names:
        print >> out, ' %-*s  %d' % (m, '`' + name + '`_', -n)
    print >> out, sep
    print >> out
    url = 'http://wiki.fysik.dtu.dk/stuff'
    for n, name in names:
        print >> out, '.. _%s: %s/%s.cover' % (name, url, name)
else:
    print >> out, 'Congratulations - the tests covers all of the code!'
print >> out
print >> out, '(coverage-test is performed Sunday nights only)'

os.system(export + 'cd ..; rm -rf gpaw/gui; '+
          'epydoc --docformat restructuredtext --parse-only ' +
          '--name GPAW --url http://wiki.fysik.dtu.dk/gpaw ' +
          '--show-imports --no-frames -v gpaw ' +
          '>& warnings; ' +
          'rm -rf %s/html; ' % dir +
          'cp -rp html %s' % dir)

if ' Warning:' in open('../warnings').read():
    send_jj_email('Warning(s) from epydoc!', '../warnings')

#os.system('cd; rm -r ' + tmpdir)

