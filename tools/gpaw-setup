#!/usr/bin/env python

# Emacs: treat this as -*- python -*-

from optparse import OptionParser


parser = OptionParser(usage='%prog [options] [elements]',
                      version='%prog 0.1')
parser.add_option('-f', '--xcfunctional', type='string', default='LDA',
                  help='Exchange-Correlation functional (default value LDA)',
                  metavar='<XC>')
parser.add_option('-n', '--non-scalar-relativistic', action='store_true',
                  default=False,
                  help='Do *not* do a scalar-relativistic calculation.')
parser.add_option('-x', '--exact-exchange', action='store_true',
                  default=False,
                  help='Calculate exact exchange integrals.')
parser.add_option('-r', '--radius', type='string', default=None,
                  help='Cutoff radius or radii (comma separated).',
                  metavar='<rcut>')
parser.add_option('-v', '--zero-potential', metavar='type,radius',
                  help='Type of zero-potential - type must be either "poly" '
                  'or "f".')
parser.add_option('--filter', default='0.4,1.75', metavar='h,x',
                  help='Parameters used for Fourier-filtering and '
                  'projector functions and zero-potential. "h" is '
                  'the cutoff grid-spacing and "x" is the ration '
                  'between outer and inner radii.')
parser.add_option('-l', '--logarithmic-derivatives', action='store_true',
                  help='Calculate of logarithmic derivatives.')
parser.add_option('-a', '--all-electron-only', action='store_true',
                  help='Skip generation of PAW setup.')
parser.add_option('-e', '--extra-projectors', type='string', default=None,
                  help='Extra projectors.',
                  metavar='0.0;0.0,1.0;0.0')
parser.add_option('-c', '--core', type='string', default=None,
                  help='Frozen core.  Examples: "[Ne]", "[Ar]3d".',
                  metavar='<core>')
parser.add_option('--normconserving', type='string',
                  help='Examples: s, sp.')
parser.add_option('--core-hole', metavar='state,occ',
                  help='Add core hole. Examples: "1s,0.5", "2p,1".')
parser.add_option('--configuration', metavar='config',
                  help='Specify non-groundstate configuration. '
                  'Na+ ion: "Ne,3s0", O2- ion: "1s2,2s2,2p6" or "He,2s2,2p6".')
parser.add_option('--compensation-charge-radius', metavar='rcut', type='float',
                  help='Cutoff radius for compensation charges.')

opt, args = parser.parse_args()

from gpaw.atom.generator import Generator, parameters
from gpaw.atom.all_electron import AllElectron

if args:
    atoms = args
else:
    atoms = parameters.keys()

for symbol in atoms:
    scalarrel = not opt.non_scalar_relativistic

    corehole = None
    if opt.core_hole is not None:
        state, occ = opt.core_hole.split(',')
        # Translate corestate string ('1s') to n and l:
        ncorehole = int(state[0])
        lcorehole = 'spd'.find(state[1])
        fcorehole = float(occ)
        corehole = (ncorehole, lcorehole, fcorehole)
        
    if opt.all_electron_only:
        a = AllElectron(symbol, opt.xcfunctional, scalarrel, corehole,
                        opt.configuration)
        a.run()
        continue
    
    g = Generator(symbol, opt.xcfunctional, scalarrel, corehole,
                  opt.configuration)

    p = parameters.get(symbol, {})
            
    if opt.core is not None:
        p['core'] = opt.core

    if opt.radius is not None:
        p['rcut'] = [float(x) for x in opt.radius.split(',')]

    if opt.extra_projectors is not None:
        extra = {}
        if opt.extra_projectors != '':
            for l, x in enumerate(opt.extra_projectors.split(';')):
                if x != '':
                    extra[l] = [float(y) for y in x.split(',')]
        p['extra'] = extra

    if opt.normconserving is not None:
        p['normcons'] = opt.normconserving

    if opt.filter is not None:
        p['filter'] = [float(x) for x in opt.filter.split(',')]

    if opt.compensation_charge_radius is not None:
        p['rcutcomp'] = opt.compensation_charge_radius

    if opt.zero_potential is not None:
        vbar = opt.zero_potential.split(',')
        p['vbar'] = (vbar[0], float(vbar[1]))

    try:
        g.run(logderiv=opt.logarithmic_derivatives,
              exx=opt.exact_exchange, **p)
    except RuntimeError, m:
        print m
