#!/usr/bin/env python
# Emacs: treat this as -*- python -*-

import sys

# importing GPAW may remove args such as --setups from argv, so save a copy
argv = sys.argv[1:]
import traceback
from optparse import OptionParser, OptionGroup

import numpy as np
from ase.atoms import Atoms, string2symbols
from ase.data.molecules import molecule
from ase.visualize import view
from ase.io import read, write

from gpaw.utilities import devnull
from gpaw.utilities.bulk2 import bulk, estimate_lattice_constant
from gpaw.utilities.bulk2 import EMTRunner, GPAWRunner
from gpaw.utilities.serialization import append_to_optiongroup
from gpaw.parameters import InputParameters
from gpaw.mpi import world


description = ('Run GPAW calculation for simple atoms, molecules or '
               'bulk systems.')

parser = OptionParser(usage='%prog [options] formula or filename',
                      version='%prog 0.1', description=description)

struct = OptionGroup(parser, 'Structure')
struct.add_option('-i', '--identifier',
                  help='String identifier added to filenames.')
struct.add_option('-x', '--crystal-structure',
                  help='Crystal structure.',
                  choices=['sc', 'fcc', 'bcc', 'diamond', 'hcp', 'rocksalt',
                           'zincblende'])
struct.add_option('-a', '--lattice-constant', type='float',
                  help='Lattice constant in Angstrom.')
struct.add_option('--c_over_a', type='float',
                  help='c/a ratio.')
struct.add_option('-v', '--vacuum', type='float', default=3.0,
                  help='Amount of vacuum to add around isolated systems '
                  '(in Angstrom).')
struct.add_option('--orthorhombic', action='store_true',
                  help='Use orthorhombic unit cell.')
struct.add_option('-r', '--repeat',
                  help='Repeat unit cell.  Use "-r 2" or "-r 2,3,1".')
struct.add_option('-M', '--magnetic-moment',
                  help='Magnetic moment(s).  Use "-M 1" or "-M 2.3,-2.3".')
parser.add_option_group(struct)

behavior = OptionGroup(parser, 'Behavior')
behavior.add_option('-c', '--clean', action='store_true',
                    help='Recalculate everything.')
behavior.add_option('-p', '--plot', action='store_true',
                    help='Plot results.')
behavior.add_option('-G', '--gui', action='store_true',
                    help="Pop up ASE's GUI.")
behavior.add_option('-w', '--write-to-file', metavar='FILENAME',
                    help="Write configuration to file.")
behavior.add_option('-O', '--optimize', action='store_true',
                    help='Find optimal volume or bondlength.')
behavior.add_option('-A', '--atomization-energy', action='store_true',
                    help='Calculate atomization energy or cohesive energy.')
behavior.add_option('-o', '--output', default='-',
                    help="Write output to file.  Use '-' for stdout "
                    '(the default).')
behavior.add_option('--parameters',
                    help='read input parameters from this file')
parser.add_option_group(behavior)

# Calculator:
calc_opts = OptionGroup(parser, 'Calculator')
defaults = InputParameters()
append_to_optiongroup(defaults, calc_opts)
parser.add_option_group(calc_opts)

if 0:
    calc_opts.add_option('-E', '--effective-medium-theory',
                         action='store_true',
                         help='Use EMT calculator.')
    calc_opts.add_option('-e', '--eigensolver', default='rmm-diis',
                         choices=['rmm-diis', 'cg'],
                         help='Eigensolver.')
    calc_opts.add_option('-m', '--mode', default='fd', choices=['fd', 'lcao'],
                         help='Mode of calculation.')
    calc_opts.add_option('-b', '--basis',
                         help='Basis set.')
    calc_opts.add_option('-k', '--brillouin-zone-sampling',
                         default='1,1,1', metavar='K1,K2,K3',
                         help='Number of k-points.  Example: -k 4,4,1.')
    calc_opts.add_option('-g', '--grid-spacing', type='float', default=0.2,
                         help='Grid spacing in Angstrom.  Deafault is 0.2.')
    calc_opts.add_option('-T', '--smearing-width', type='float', default=0.1,
                         metavar='WIDTH',
                         help='Occupation number smearing width in eV.  Default '
                         'is 0.1 eV.')
    calc_opts.add_option('-s', '--finite-difference-stencils', default='3,3',
                         metavar='K,I',
                         help='Range of stencils for kinetic energy and '
                         'interpolation.  Deafault is -s 3,3.')
    calc_opts.add_option('-f', '--xc-functional', default='LDA',
                         help='Exchange-Correlation functional (default value LDA).')
    calc_opts.add_option('-N', '--number-of-bands', type='int',
                         help='Number of bands / states.')
    calc_opts.add_option('--stdout',
                         action='store_true',
                         help="Write GPAW's output to standard output.")
    parser.add_option_group(calc_opts)

opt, args = parser.parse_args(argv)


def run():
    if len(args) != 1:
        parser.error("incorrect number of arguments")
    name = args[0]

    if world.rank == 0:
        if opt.output == '-':
            out = sys.stdout
        else:
            out = open(opt.output, 'w')
    else:
        out = devnull

    a = None
    try:
        symbols = string2symbols(name)
    except ValueError:
        # name was not a chemical formula - must be a file name:
        atoms = read(name)
    else:
        if opt.crystal_structure:
            a = opt.lattice_constant
            if a is None:
                a = estimate_lattice_constant(name, opt.crystal_structure,
                                              opt.c_over_a)
                out.write('Using an estimated lattice constant of %.3f Ang\n' %
                          a)

            atoms = bulk(name, opt.crystal_structure, a, opt.c_over_a,
                         orthorhombic=opt.orthorhombic)
        else:
            try:
                # Molecule?
                atoms = molecule(name)
            except NotImplementedError:
                if len(symbols) == 1:
                    # Atom
                    atoms = Atoms(name)
                elif len(symbols) == 2:
                    # Dimer
                    atoms = Atoms(name, positions=[(0, 0, 0),
                                                   (opt.bond_length, 0, 0)])
                else:
                    raise ValueError('Unknown molecule: ' + name)

    if opt.magnetic_moment:
        magmom = opt.magnetic_moment.split(',')
        atoms.set_initial_magnetic_moments(np.tile(magmom,
                                                   len(atoms) // len(magmom)))

    if opt.repeat is not None:
        r = opt.repeat.split(',')
        if len(r) == 1:
            r = 3 * r
        atoms = atoms.repeat([int(c) for c in r])

    if opt.gui:
        view(atoms)
        return

    if opt.write_to_file:
        write(opt.write_to_file, atoms)
        return

    if opt.effective_medium_theory:
        Runner = EMTRunner
    else:
        Runner = GPAWRunner

    if opt.optimize:
        strains = np.linspace(0.98, 1.02, 5)
    else:
        strains = None

    runner = Runner(name, atoms, strains, tag=opt.identifier, clean=opt.clean,
                    out=out)

    if not opt.effective_medium_theory:
        kpts = [int(x) for x in opt.brillouin_zone_sampling.split(',')]

        if opt.finite_difference_stencils:
            stencils = [int(x)
                        for x in opt.finite_difference_stencils.split(',')]
        else:
            stencils = None

        input_parameters = None
        if opt.parameters:
            from gpaw.parameters import InputParameters
            input_parameters = eval(open(opt.parameters).read())

        runner.set_parameters(mode=opt.mode, basis=opt.basis, kpts=kpts,
                              h=opt.grid_spacing, xc=opt.xc_functional,
                              stencils=stencils, width=opt.smearing_width,
                              eigensolver=opt.eigensolver,
                              nbands=opt.number_of_bands, vacuum=opt.vacuum,
                              stdout=opt.stdout,
                              input_parameters=input_parameters)

    runner.run()

    if opt.atomization_energy:
        runner.atomize()

    runner.summary(plot=opt.plot, a0=a)


try:
    run()
except KeyboardInterrupt:
    print 'Killed!'
    raise SystemExit(1)
except SystemExit:
    raise
except Exception:
    #traceback.print_exc()
    print >> sys.stderr, """
An exception occurred!  Please report the issue to
gridpaw-developer@listserv.fysik.dtu.dk - thanks!  Please also report this if
it was a user error, so that a better error message can be provided
next time."""
    raise
