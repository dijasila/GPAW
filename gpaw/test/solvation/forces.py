from gpaw.test import equal
from ase import Atoms
from ase.units import Pascal, m
from ase.data.vdw import vdw_radii
from ase.parallel import rank
from gpaw.solvation import (
    SolvationGPAW,
    EffectivePotentialCavity,
    Power12Potential,
    LinearDielectric,
    KB51Volume,
    GradientSurface,
    VolumeInteraction,
    SurfaceInteraction,
    LeakedDensityInteraction
)
import numpy as np

SKIP_ENERGY_CALCULATION = True
F_max_err = 0.01

h = 0.2
u0 = 0.180
epsinf = 80.
T = 298.15
atomic_radii = lambda atoms: [vdw_radii[n] for n in atoms.numbers]

atoms = Atoms('NaCl', positions=((5.6, 5.6, 6.8), (5.6, 5.6, 8.8)))
atoms.set_cell((11.2, 11.2, 14.4))


atoms.calc = SolvationGPAW(
    xc='PBE', h=h, setups={'Na': '1'},
    cavity=EffectivePotentialCavity(
        effective_potential=Power12Potential(atomic_radii, u0),
        temperature=T,
        volume_calculator=KB51Volume(),
        surface_calculator=GradientSurface()
        ),
    dielectric=LinearDielectric(epsinf=epsinf),
    # parameters chosen to give ~ 1eV for each interaction
    interactions=[
        VolumeInteraction(pressure=-1e9 * Pascal),
        SurfaceInteraction(surface_tension=100. * 1e-3 * Pascal * m),
        LeakedDensityInteraction(voltage=10.)
        ]
    )


def vac(atoms):
    return min(
        atoms.positions[0][2],
        14.4 - atoms.positions[1][2]
        )

step = .05
if not SKIP_ENERGY_CALCULATION:
    d = []
    E = []
    F = []
    while vac(atoms) >= 5.6:
        d.append(abs(atoms.positions[0][2] - atoms.positions[1][2]))
        E.append(atoms.calc.get_potential_energy(atoms, force_consistent=True))
        F.append(atoms.calc.get_forces(atoms))
        atoms.positions[0][2] -= step

    d = np.array(d)
    E = np.array(E)
    F = np.array(F)

    if rank == 0:
        np.save('d.npy', d)
        np.save('E.npy', E)
        np.save('F.npy', F)
        from pprint import pprint
        print 'd'
        pprint(list(d))
        print ''
        print 'E'
        pprint(list(E))
        print ''
        print 'F'
        pprint([list([list(l2) for l2 in l1]) for l1 in F])
else:
    d = [
        2.0000000000000009,
        2.0500000000000007,
        2.1000000000000005,
        2.1500000000000004,
        2.2000000000000002,
        2.25,
        2.2999999999999998,
        2.3499999999999996,
        2.3999999999999995,
        2.4499999999999993,
        2.4999999999999991,
        2.5499999999999989,
        2.5999999999999988,
        2.6499999999999986,
        2.6999999999999984,
        2.7499999999999982,
        2.799999999999998,
        2.8499999999999979,
        2.8999999999999977,
        2.9499999999999975,
        2.9999999999999973,
        3.0499999999999972,
        3.099999999999997,
        3.1499999999999968,
        3.1999999999999966
        ]

    E = [
        -3.5623535762750524,
        -3.8472870257911911,
        -4.0699218430422714,
        -4.2409991092743802,
        -4.3696105011867532,
        -4.4631222115404343,
        -4.5277730738614999,
        -4.5689457396644837,
        -4.5908417731156508,
        -4.597321980730567,
        -4.5910434450569175,
        -4.5749980127515872,
        -4.550705160693151,
        -4.5204637993809298,
        -4.4854516960173134,
        -4.4465670075081416,
        -4.405133692766241,
        -4.3619321656932852,
        -4.3175326640060403,
        -4.2725680303255551,
        -4.2273272658418337,
        -4.1823629893288619,
        -4.1378306210181002,
        -4.0939080510662151,
        -4.0508743834633512
         ]

    F = [
        [[2.3703179268665488e-12, 2.4146719112687317e-12, -6.4016619364722649],
         [8.4507191874562825e-11, 1.023028986973659e-10, 6.40767007789698]],
        [[2.4789967940603202e-12, 2.5842469865455664e-12, -5.0358531307264478],
         [8.3704894778245693e-11, 1.0548043100508856e-10, 5.0367570550196117]],
        [[2.4751143980195172e-12, 2.2034947446019799e-12, -3.9024286596683577],
         [8.3360186432825966e-11, 1.0464096857341079e-10, 3.90547152522258]],
        [[2.3734609425699067e-12, 2.2350837890693175e-12, -2.9652995412894003],
         [8.4145037169288961e-11, 1.0512408018038396e-10, 2.9677107560317046]],
        [[2.4296127081711055e-12, 2.2757826991666638e-12, -2.194058723999877],
         [8.4002176286450937e-11, 1.0096665547470542e-10, 2.1928996279654491]],
        [[2.2993562493989934e-12, 2.3117203943019373e-12, -1.5604538976791413],
         [8.1679335184484134e-11, 1.067053307819407e-10, 1.5585955903612092]],
        [[2.3874711830177042e-12, 2.3544709754836433e-12, -1.0396230932584418],
         [8.4027967382875373e-11, 1.0312414755281868e-10, 1.04279509863508]],
        [[2.2852792033317236e-12, 2.2504267206567006e-12, -0.61400861376868587],
         [8.4392278815266668e-11, 1.012160898537005e-10, 0.61794501629934895]],
        [[2.3504723939974411e-12, 2.2562360719336094e-12, -0.26945686286679527],
         [8.1972685665534794e-11, 1.0723690235717904e-10, 0.27301837357349129]],
        [[2.3082163043449523e-12, 2.352151695127411e-12, 0.0090740403939821336],
         [8.6757870529056336e-11, 1.0670118985621885e-10, -0.0097043853328481183]],
        [[2.408923528526438e-12, 2.2450187832876011e-12, 0.23389869484678052],
         [8.5032570635779071e-11, 1.0512924034016195e-10, -0.23084101615503771]],
        [[2.3210865402267332e-12, 2.3595778524218858e-12, 0.41342444213471685],
         [8.4659669269604675e-11, 1.086430813718418e-10, -0.40969326478087498]],
        [[2.5001802835285234e-12, 2.260227910239048e-12, 0.55322975798696061],
         [8.4018666381828164e-11, 1.0674724904503943e-10, -0.55143467417031722]],
        [[2.3848601241035661e-12, 2.4050937294129455e-12, 0.66199103978192764],
         [8.272482792749932e-11, 1.0233890371132527e-10, -0.66368107039703883]],
        [[2.4583238316490968e-12, 2.1929464791356537e-12, 0.74603756991924075],
         [8.4868066036754719e-11, 9.6798524677682185e-11, -0.7444646501978055]],
        [[2.4977275163949341e-12, 2.2758161503256479e-12, 0.80847542583881071],
         [8.2371496408721812e-11, 1.023136860890738e-10, -0.8083103258059805]],
        [[2.4854169295607701e-12, 2.1129759083909498e-12, 0.85173914456094857],
         [8.6050514562903879e-11, 1.0106057277226664e-10, -0.85472086452715268]],
        [[2.4492504578649283e-12, 2.191385425049728e-12, 0.88033155272499053],
         [8.6910484420563654e-11, 1.0505316285221369e-10, -0.87721567193642458]],
        [[2.3573530663834567e-12, 2.2529355575805099e-12, 0.8987102078913688],
         [8.6177788305967203e-11, 1.006332115724668e-10, -0.89872599750505455]],
        [[2.4233699582200148e-12, 2.2997671801582781e-12, 0.90729349437626083],
         [8.5819448726236543e-11, 1.0913964882729586e-10, -0.90650139382905237]],
        [[2.4732295446858457e-12, 2.4412432818884516e-12, 0.90612932692466452],
         [8.2052712638036013e-11, 1.1247360245942725e-10, -0.90635460113653565]],
        [[2.4195459228602903e-12, 2.2901332463708516e-12, 0.89896499593069101],
         [8.571495922513674e-11, 1.079811172850516e-10, -0.90017504929931336]],
        [[2.3770445088151167e-12, 2.2773103020936053e-12, 0.88820125978048359],
         [8.4656408006104389e-11, 1.006855338674091e-10, -0.89000767501812339]],
        [[2.5202226453618883e-12, 2.496348491121626e-12, 0.87344821637616177],
         [8.2797223913106345e-11, 1.0068715457170626e-10, -0.87104931654620998]],
        [[2.6343167697025146e-12, 2.4325682813252363e-12, 0.8537392808952865],
         [8.3116559645741017e-11, 1.0958554798537257e-10, -0.85170416874828525]]
        ]
    d = np.array(d)
    E = np.array(E)
    F = np.array(F)


# test for orthogonal forces equal zero:
equal(F[..., :2], .0, 1e-7)

stencil = 2  # 1 is too rough, 3 does not change compared to 2
FNa, FCl = F[..., 2].T
FNa *= -1.
# test symmetry
equal(FNa, FCl, F_max_err)
dd = np.diff(d)[0]
kernel = {
    1: np.array((0.5, 0, -0.5)),
    2: np.array((-1. / 12., 2. / 3., 0, -2. / 3., 1. / 12.)),
    3: np.array((1. / 60., -0.15, 0.75, 0, -0.75, 0.15, -1. / 60.)),
    }

dEdz = np.convolve(E, kernel[stencil] / step, 'valid')

err = np.maximum(
    np.abs(-dEdz - FNa[stencil:-stencil]),
    np.abs(-dEdz - FCl[stencil:-stencil])
    )

# test forces against -dE / dd finite difference
equal(err, .0, F_max_err)

if SKIP_ENERGY_CALCULATION:
    # check only selected points:
    def check(index):
        atoms.positions[0][2] = 6.8 - index * step
        F_check = atoms.get_forces()
        equal(F_check[..., :2], .0, 1e-7)
        FNa_check, FCl_check = F_check[..., 2].T
        FNa_check *= -1.
        equal(FNa_check, FCl_check, F_max_err)
        err = np.maximum(
            np.abs(-dEdz[index - stencil] - FNa_check),
            np.abs(-dEdz[index - stencil] - FCl_check)
            )
        equal(err, .0, F_max_err)
    l = len(FNa)
    #check(stencil)
    check(l // 2)
    #check(l - 1 - stencil)
