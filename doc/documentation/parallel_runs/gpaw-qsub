#!/usr/bin/env python
# Emacs: treat this as -*- python -*-

from sys import argv
import os

i = 1
while not (os.path.isfile(argv[i]) and (argv[i].endswith('.py') or
                                        os.access(argv[i], os.X_OK))):
    i += 1

options = ' '.join(argv[1:i])
script = argv[i]
job = ' '.join(argv[i:])

qsub = '#!/usr/bin/env python\n'
qsub += '#PBS -N %s\n' % script.split('/')[-1] # set default job name

for line in open(script, 'r'):
    if line.startswith('#PBS'):
        qsub += line

qsub += """\
import os
import sys
from gpaw import get_gpaw_python_path

nodename = os.uname()[1]
c = nodename[0]
assert c in 'abcdnmqp'

# use mpi_paffinity_alone if set as environment variable
# http://www.open-mpi.de/faq/?category=tuning#setting-mca-params
if os.environ.get('OMPI_MCA_mpi_paffinity_alone'):
    mpi_paffinity_alone = '--mca mpi_paffinity_alone '+os.environ.get('OMPI_MCA_mpi_paffinity_alone')
else:
    mpi_paffinity_alone = ''

if c in 'abcd':
    # Intel Niflheim node:
    mpirun = 'mpiexec ' + mpi_paffinity_alone
elif c in 'nmq':
    # Opteron Niflheim node:
    vers = sys.version[:3]
    if vers == '2.3':
        mpirun = ('export LD_LIBRARY_PATH=/opt/acml-4.0.1/gfortran64/lib:' 
                  '/opt/acml-4.0.1/gfortran64/lib:' 
                  '/usr/local/openmpi-1.2.5-gfortran/lib64 && ' 
                  'export PATH=/usr/local/openmpi-1.2.5-gfortran/bin:' 
                  '${PATH} && '
                  'mpiexec ' + mpi_paffinity_alone)
    elif vers == '2.4':
        mpirun = 'mpiexec ' + mpi_paffinity_alone
    else:
        raise RuntimeError('Unknown python version')
elif c == 'p':
    # Infiniband:
    np = len(open(os.environ['PBS_NODEFILE']).readlines())
    mpirun = 'mpirun -np %d -machinefile $PBS_NODEFILE' % np
else:
    raise RuntimeError('Unknown node type')
"""

# Start script:
qsub += """
path = get_gpaw_python_path()
retcode = os.system('%s %s/gpaw-python JOB' % (mpirun, path))
if (retcode & 0xff) == 0:
    sys.exit(retcode >> 8)  # No signal, return the status only.
else:
    sys.exit(retcode)  # Return everything, signalling failure.
""".replace('JOB', job)

os.popen('qsub ' + options, 'w').write(qsub)
