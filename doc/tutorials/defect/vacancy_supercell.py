from ase.io import read

from gpaw import GPAW

from gpaw1.defects.defect import Defect

# LCAO calculator and supercell parameters
PP = 'PAW'       # PAW pseudopotentials
basis = 'DZP'    # LCAO basis
h = 0.2          # Grid spacing
k = 3            # k points
kpts = (k, k, 1) # Use only in periodic directions
N = 5            # Supercell size: NxN

# Setup lcao calculator
# - k-points necessary in order to Fourier transform to real-space.
# - Only time-reversal symmetry (TRS) allowed here!
# - make sure to use the same grid spacing/number of grid points as in the
#   calculation of the defect potential.

# Parallelization over k-points (TRS reduces the 3x3=9 to 5 k-points)
parallel = {'kpt': 5}

calc_lcao = GPAW(parallel=parallel,
                 kpts=kpts,
                 mode='lcao',
                 basis='%s(dzp)' % basis_lcao.lower(),
                 symmetry={'point_group': False},                 
                 setups={'default': PP.lower()},
                 h=h,
                 txt=None)

# Atoms
atoms = read('graphene.traj')

# Base name for pickle files generated by the ``run()`` call
fname = 'vacancy_supercell_%ux%u' % (N, N)

# Not necessary to provide ``calc`` and ``defect`` keywords here.
def_calc = Defect(atoms, calc=None, supercell=(N, N, 1), defect=None,
                  name=fname, pckldir='.')

# Set LCAO calculator used in the calculation of the supercell matrix
def_calc.set_lcao_calculator(calc_lcao)

# Calculate supercell matrix and dump to file
def_calc.calculate_supercell_matrix(dump=True)
